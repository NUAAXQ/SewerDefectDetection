name: "NDCNN"
layer {
	name: "data"
	type: "Data"
	top: "data"
	top: "label"
	include {
		phase: TRAIN
	}
	transform_param {
		crop_size: 256
		mean_file：train_mean.binaryproto
		mirror: true
	}
	data_param {
		source: "../train_lmdb"
		batch_size: 64
		backend: LMDB
	}
}
layer {
	name: "data"
	type: "Data"
	top: "data"
	top: "label"
	include {
		phase: TEST
	}

	transform_param {
		crop_size: 256
		mean_file：train_mean.binaryproto
		mirror: false
	}
	data_param {
		source: "../val_lmdb"
		batch_size: 16
		backend: LMDB
	}
}
layer{
	name: "conv0"
	type: "Convolution"
	bottom: "data"
	top: "conv0"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 2
		decay_mult: 0
	}
	convolution_param{
		num_output: 64
		pad: 5
		kernel_size: 11
		stride: 1
		weight_filler {
		type: "gaussian"
		std: 0.01
    }
		bias_filler {
			type: "constant"
			value: 0
		}
	}
}
layer{
		name: "relu0"
		type: "ReLU"
		bottom: "conv0"
		top: "conv0"
}
layer{
	name: "pool0"
	type: "Pooling"
	bottom: "conv0"
	top: "pool0"
	pooling_param{
		pool: MAX
		kernel_size:2
		stride: 2
	}
}
layer {
		name: "norm0"
		type: "LRN"
		bottom: "pool0"
		top: "norm0"
		lrn_param {
			local_size: 5
			alpha: 0.0001
			beta: 0.75
	}
}
layer{
	name: "conv1"
	type: "Convolution"
	bottom: "norm0"
	top: "conv1"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 2
		decay_mult: 0
	}
	convolution_param{
		num_output: 128
		pad: 1
		kernel_size: 3
		stride: 2
		weight_filler {
		type: "gaussian"
		std: 0.01
		}
		bias_filler {
			type: "constant"
			value: 1
		}
	}
}
layer{
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer{
	name: "pool1"
	type: "Pooling"
	bottom: "conv1"
	top: "pool1"
	pooling_param{
		pool:MAX
		kernel_size:2
		stride: 2
	}
}
layer {
	name: "norm1"
	type: "LRN"
	bottom: "pool1"
	top: "norm1"
	lrn_param {
		local_size: 5
		alpha: 0.0001
		beta: 0.75
	}
}

layer{
	name: "conv2"
	type: "Convolution"
	bottom: "norm1"
	top: "conv2"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 2
		decay_mult: 0
	}
	convolution_param{
		num_output: 128
		pad: 1
		kernel_size: 3
		stride: 2
		weight_filler {
			type: "gaussian"
			std: 0.01
		}
		bias_filler {
		type: "constant"
		value: 1
		}
	}
}
layer{
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer{
	name: "pool2"
	type: "Pooling"
	bottom: "conv2"
	top: "pool2"
	pooling_param{
		pool:MAX
		kernel_size:2
		stride : 2
	}
}
layer{
	name: "fc0"
	type: "InnerProduct"
	bottom: "pool2"
	top: "fc0"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 2
		decay_mult: 0
	}
	inner_product_param{
		num_output: 1024
		weight_filler {
			type: "gaussian"
			std: 0.005
		}
		bias_filler {
			type: "constant"
			value: 1
		}
	}
}
layer{
	name:"relu4"
	type:"ReLU"
	bottom:"fc0"
	top:"fc0"
}
layer{
	name:"drop0"
	type: "Dropout"
	bottom: "fc0"
	top: "fc0"
	dropout_param{
		dropout_ratio:0.6
	}
}
layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc1"
    param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "fc1"
  top: "fc1"
}
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "fc1"
  top: "fc1"
  dropout_param {
    dropout_ratio: 0.6
  }
}
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
	#num_output: 6 
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc2"
  bottom: "label"
  top: "loss"
}
